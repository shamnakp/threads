<%- include('../layout/admin-header.ejs' )%>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">

    </head>

    <section class="content-main">
        <form action="/api/admin/createProduct" method="POST" enctype="multipart/form-data"
            onsubmit="return validateForm();">
            <!-- Add your form action and method attributes above -->
            <div class="row">
                <div class="col-6">
                    <div class="content-header">
                        <h2 class="content-title">Add New Product</h2>
                        <div>
                            <button class="btn btn-light rounded font-sm mr-5 text-body hover-up">Save to draft</button>
                            <button type="submit" class="btn btn-md rounded font-sm hover-up">Publish</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <h6>1. General info</h6>
                                </div>
                                <div class="col-md-9">
                                    <div class="mb-4">
                                        <label class="form-label">Product title</label>
                                        <input type="text" name="title" placeholder="Type here" class="form-control">
                                        <p style="color: red;" id="title"></p>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">Description</label>
                                        <textarea placeholder="Type here" name="discription" class="form-control"
                                            rows="4"></textarea>
                                        <p style="color: red;" id="discription"></p>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">Brand name</label>
                                        <input type="text" name="brand" placeholder="KTM" class="form-control">
                                        <p style="color: red;" id="brand"></p>
                                    </div>
                                </div> <!-- col.// -->
                            </div> <!-- row.// -->
                            <hr class="mb-4 mt-0">
                            <div class="row">
                                <div class="col-md-3">
                                    <h6>2. Regular Pricing</h6>
                                </div>
                                <div class="col-md-9">
                                    <div class="mb-4">
                                        <label class="form-label">Cost in INR</label>
                                        <input type="text" name="regularPrice" placeholder="₹000.00" class="form-control">
                                        <p style="color: red;" id="price"></p>
                                    </div>
                                </div> <!-- col.// -->
                            </div> <!-- row.// -->
                            <div class="row">
                                <div class="col-md-3">
                                <h6>Selling Pricing</h6>
                            </div>
                            <div class="col-md-9">
                                <div class="mb-4">
                                    <label class="form-label">Cost in INR</label>
                                    <input type="text" name="price" placeholder="₹000.00" class="form-control">
                                    <p style="color: red;" id="price"></p>
                                </div>
                            </div> 
                        </div> 
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>3. Color</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Color</label>
                                            <input type="text" name="color" placeholder="Black" class="form-control">
                                            <p style="color: red;" id="color"></p>
                                        </div>
                                    </div> <!-- col.// -->
                                </div> <!-- row.// -->
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>4. Quantity</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Quantity</label>
                                            <input type="text" name="quantity" placeholder="0" class="form-control">
                                            <p style="color: red;" id="quantity"></p>
                                        </div>
                                    </div> <!-- col.// -->

                                </div> <!-- row.// -->
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>5. Size </h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Size</label>
                                            <input type="text" name="size" placeholder="26t" class="form-control">
                                            <p style="color: red;" id="title"></p>
                                        </div>
                                    </div> <!-- col.// -->

                                </div> <!-- row.// -->
                                <hr class="mb-4 mt-0">
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>6. Category</h6>
                                    </div>


                                    <div class="caogary-Dropdoun">

                                        <select id="category" name="category" class="form-select">
                                            <% categories.forEach(category=> { %>
                                                <option><%- category.name %></option>
                                                <% }); %>
                                        </select>


                                    </div>


                                </div> <!-- row.// -->
                                <hr class="mb-4 mt-0">
                                <!-- <div class="row">
                                    <div class="col-md-3">
                                        <h6>7. Media</h6>
                                    </div>
                                    <div class="col-md-9">

                                        <div class="mb-4">
                                            <label class="form-label">Images</label>
                                            <input class="form-control" type="file" accept="image/*" name="images"
                                                id="imageInput" multiple>
                                            <p style="color: red;" id="images"></p>
                                            <div class="image-preview"></div>
                                        </div>
                                    </div>
                                </div> -->

                                <div class="card mb-2">
                                    <div class="card-header">
                                        <h4>Choose images</h4>
                                    </div>
                                    <!-- <div class="border row">
                                        <div id="addedImagesContainer" class="thumbnails-container"></div>
                                    </div> -->
    
    
    
    
                                    <div class="row">
                                      <div class="card-body align-items-center mb-5" style="margin-bottom: 20px;">
                                            <img src="assets/imgs/theme/upload.svg" alt="" id="imgView1">
                                            <input class="form-control" type="file" name="images" id="input1"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage1(event), viewImage(event, 1)">
                                        </div>
                                        <div class="image-cropper d-flex align-items-center mb-5"
                                            style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg1" alt="">
                                            <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                            <img src="assets/imgs/theme/upload.svg" alt="" id="imgView2">
                                            <input class="form-control" type="file" name="images" id="input2"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage2(event),viewImage(event, 2)">
                                        </div>
                                        <div class="image-cropper d-flex align-items-center"
                                            style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg2" alt="">
                                            <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                            <img src="assets/imgs/theme/upload.svg" alt="" id="imgView3">
                                            <input class="form-control" type="file" name="images" id="input3"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage3(event),viewImage(event, 3)">
                                        </div>
                                        <div class="image-cropper d-flex align-items-center"
                                            style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg3" alt="">
                                            <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

        </form>
    </section> <!-- content-main end// -->

    <script>
        function validateForm() {
            // Reset any existing error messages
            clearErrorMessages();

            const title = document.getElementsByName('title')[0].value;
            const description = document.getElementsByName('discription')[0].value;
            const brand = document.getElementsByName('brand')[0].value;
            const price = document.getElementsByName('price')[0].value;
            const color = document.getElementsByName('color')[0].value;
            const category = document.getElementsByName('category')[0].value; // Get the selected category

            const images = document.getElementsByName('images')[0].files;

            let isValid = true; // Assume the form is valid by default

            // Check if title is empty
            if (title.trim() === '') {
                displayErrorMessage('title', 'Please enter a product title.');
                isValid = false;
            }

            // Check if description is empty
            if (description.trim() === '') {
                displayErrorMessage('discription', 'Please enter a product description.');
                isValid = false;
            }

            // Check if brand is empty
            if (brand.trim() === '') {
                displayErrorMessage('brand', 'Please enter a brand name.');
                isValid = false;
            }

            const quantity = document.getElementsByName('quantity')[0].value;

            // Check if quantity is a non-negative number
            if (!/^\d+$/.test(quantity) || parseInt(quantity) < 0) {
                displayErrorMessage('quantity', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }

            // Check if price is a non-negative number
            if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                displayErrorMessage('price', 'Please enter a valid non-negative price.');
                isValid = false;
            }


            // Check if color is empty
            if (color.trim() === '') {
                displayErrorMessage('color', 'Please enter a product color.');
                isValid = false;
            }

            // Check if a category is selected


            // Check if at least one image is selected
            // if (images.length === 0) {
            //     displayErrorMessage('images', 'Please select at least one image.');
            //     isValid = false;
            // } else {
            //     // Check each selected file for image type
            //     for (const image of images) {
            //         const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
            //         if (!allowedTypes.includes(image.type)) {
            //             displayErrorMessage('images', 'Please select only image files (png, jpg).');
            //             isValid = false;
            //             break; // Stop checking further if an invalid image type is found
            //         }
            //     }
            // }
            if (category.trim() === '') {
                displayErrorMessage('category', 'Please select a product category.');
                isValid = false;
            }

            return isValid; // Form is valid
        }

        function displayErrorMessage(fieldName, message) {
            const field = document.getElementsByName(fieldName)[0];
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.innerText = message;
            errorDiv.style.color = 'red';
            field.parentNode.appendChild(errorDiv);
        }

        function clearErrorMessages() {
            const errorMessages = document.querySelectorAll('.error-message');
            errorMessages.forEach((errorMessage) => {
                errorMessage.parentNode.removeChild(errorMessage);
            });
        }



        // ______image croper____________

        // JavaScript code
        document.addEventListener('DOMContentLoaded', function () {
            const imageInput = document.getElementById('imageInput');
            const imagePreview = document.querySelector('.image-preview');

            imageInput.addEventListener('change', function (event) {
                const files = event.target.files;
                if (!files || files.length === 0) return;

                // Clear previous previews
                imagePreview.innerHTML = '';

                // Loop through selected files
                for (const file of files) {
                    const reader = new FileReader();

                    reader.onload = function (e) {
                        const cropperContainer = document.createElement('div');
                        cropperContainer.className = 'cropper-container';

                        const cropperImage = document.createElement('img');
                        cropperImage.src = e.target.result;
                        cropperImage.classList.add('cropper-image');

                        const cropper = new Cropper(cropperImage, {
                            aspectRatio: 16 / 9, // Set aspect ratio as needed
                            crop(event) {
                                // You can access crop data here if needed
                                // console.log(event.detail.x);
                                // console.log(event.detail.y);
                                // console.log(event.detail.width);
                                // console.log(event.detail.height);
                                // console.log(event.detail.rotate);
                                // console.log(event.detail.scaleX);
                                // console.log(event.detail.scaleY);
                            }
                        });

                        cropperContainer.appendChild(cropperImage);
                        imagePreview.appendChild(cropperContainer);
                    };

                    reader.readAsDataURL(file);
                }
            });
        });

    </script>
    <script>



        function viewImage1(event) {
            document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage2(event) {
            document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage3(event) {
            document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
        }


        function viewImage(event, index) {
            let input = event.target;
            let reader = new FileReader();

            reader.onload = function () {
                let dataURL = reader.result;
                let image = document.getElementById('imgView' + index);
                image.src = dataURL;

                // Initialize Cropper.js on the image
                let cropper = new Cropper(image, {
                    aspectRatio:  4 / 3, // Square aspect ratio
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true,
                    width: 1200, // Set the desired width
                    height: 900, // Set the desired height
                });


                // Show the image cropper container
                let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
                cropperContainer.style.display = 'block';

                // Update the cropped image when the "Save" button is clicked
                let saveButton = document.querySelector('#saveButton' + index);
                saveButton.addEventListener('click', async function () {
                    let croppedCanvas = cropper.getCroppedCanvas();
                    //  width: 500, // Specify the desired width here
                    //  height: 600,
                    // });

                    let croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                    // Generate a unique name for the cropped image file based on the current timestamp
                    let timestamp = new Date().getTime();
                    let fileName = `cropped-img-${timestamp}-${index}.png`;

                    await croppedCanvas.toBlob(blob => {
                        let input = document.getElementById('input' + index);
                        let imgFile = new File([blob], fileName, blob)
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files
                    });
                    // cropperContainer.style.display = 'none';
                });
            };
            reader.readAsDataURL(input.files[0]);
        }






        // Array to store selected images
        const selectedImages = [];

        // Function to handle file input change
        document.getElementById("imageInput").addEventListener("change", handleFileSelect);

        function handleFileSelect(event) {
            // Target the container for displaying thumbnails
            const addedImagesContainer = document.getElementById("addedImagesContainer");

            // Clear previous content
            addedImagesContainer.innerHTML = "";

            const files = event.target.files;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];

                // Add the file to the selected images array
                selectedImages.push(file);

                // Create thumbnail element
                const thumbnail = document.createElement("div");
                thumbnail.classList.add("thumbnail");

                // Create image element
                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                img.alt = "thumbnail";

                // Set a fixed width for the image
                img.style.width = "50px"; // Adjust the width as needed
                img.style.height = "auto";

                // Create remove icon
                const removeIcon = document.createElement("span");
                removeIcon.classList.add("remove-icon");
                removeIcon.innerHTML = "&times;"; // Multiplication symbol as a cross

                // Event listener to remove the image on icon click
                removeIcon.addEventListener("click", function () {
                    // Remove the file from the selected images array
                    const index = selectedImages.indexOf(file);
                    if (index !== -1) {
                        selectedImages.splice(index, 1);
                    }

                    // Remove the thumbnail from the container
                    thumbnail.remove();
                });

                // Append elements to thumbnail
                thumbnail.appendChild(img);
                thumbnail.appendChild(removeIcon);

                // Append thumbnail to the container
                addedImagesContainer.appendChild(thumbnail);
            }
        }

    </script>

    <%- include('../layout/admin-footer.ejs' )%>